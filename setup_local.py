#!/usr/bin/env python3
"""
Script d'installation et de configuration pour les tests locaux.
Ce script installe les d√©pendances et configure l'environnement.
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Ex√©cute une commande et affiche le r√©sultat."""
    print(f"\nüîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Succ√®s")
        if result.stdout:
            print(f"   Output: {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - √âchec")
        print(f"   Erreur: {e.stderr.strip() if e.stderr else str(e)}")
        return False

def check_python_version():
    """V√©rifie la version de Python."""
    version = sys.version_info
    print(f"üêç Version Python: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ requis")
        return False
    
    print("‚úÖ Version Python compatible")
    return True

def install_dependencies():
    """Installe les d√©pendances depuis requirements.txt."""
    requirements_file = Path("requirements.txt")
    
    if not requirements_file.exists():
        print("‚ùå Fichier requirements.txt introuvable")
        return False
    
    # Installer les d√©pendances
    return run_command(
        f"{sys.executable} -m pip install -r requirements.txt",
        "Installation des d√©pendances"
    )

def setup_environment():
    """Configure l'environnement de test."""
    print("\nüõ†Ô∏è Configuration de l'environnement de test...")
    
    # Cr√©er le r√©pertoire de sortie s'il n'existe pas
    output_dir = Path("output")
    output_dir.mkdir(exist_ok=True)
    print(f"‚úÖ R√©pertoire de sortie cr√©√©: {output_dir.absolute()}")
    
    # V√©rifier que les modules sont importables
    try:
        # Ajouter les chemins n√©cessaires
        src_path = Path("src").absolute()
        root_path = Path(".").absolute()
        sys.path.insert(0, str(src_path))
        sys.path.insert(0, str(root_path))
        
        # Test d'import simple
        import scrapers
        print("‚úÖ Modules scrapers importables")
        return True
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("üí° Cela peut √™tre normal - les imports relatifs seront r√©solus √† l'ex√©cution")
        return True  # Continuer malgr√© l'erreur d'import

def main():
    """Fonction principale de configuration."""
    print("=== Configuration de l'environnement de test local ===")
    print(f"üìÅ R√©pertoire de travail: {Path.cwd()}")
    
    # V√©rifications pr√©liminaires
    if not check_python_version():
        sys.exit(1)
    
    # Installation des d√©pendances
    if not install_dependencies():
        print("\n‚ùå √âchec de l'installation des d√©pendances")
        print("Essayez d'installer manuellement avec:")
        print(f"   {sys.executable} -m pip install -r requirements.txt")
        sys.exit(1)
    
    # Configuration de l'environnement
    if not setup_environment():
        print("\n‚ùå √âchec de la configuration de l'environnement")
        sys.exit(1)
    
    print("\nüéâ Configuration termin√©e avec succ√®s!")
    print("\nüìã Prochaines √©tapes:")
    print("   1. Ex√©cutez: python test_local.py")
    print("   2. V√©rifiez les r√©sultats dans test_output.json")
    print("\nüí° Conseils:")
    print("   - Le test utilise une configuration par d√©faut (iPhone 15 sur Amazon)")
    print("   - Modifiez test_local.py pour personnaliser les param√®tres")
    print("   - Les logs s'affichent dans la console")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Configuration interrompue par l'utilisateur.")
    except Exception as e:
        print(f"\nüí• Erreur fatale: {e}")
        sys.exit(1)